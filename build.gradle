buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    // <3
    maven {
        name = "mightypirates"
        url = "https://maven.cil.li/"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    // These are necessary because some parts of the maven repo is weirdly structured
    ivy {
        name 'weird maven repos'
        artifactPattern "https://maven.cil.li/[module]/[revision]/[module]-[revision].[ext]"
        metadataSources {
            artifact()
        }
    }
    ivy {
        name 'weird maven repos 2'
        artifactPattern "https://maven.cil.li/[module]/[revision]/[module]-[revision]-[classifier].[ext]"
        metadataSources {
            artifact()
        }
    }
}

apply plugin: 'forge'

// These settings allow you to choose what version of Java you want to be compatible with. Forge 1.7.10 runs on Java 6 to 8.
sourceCompatibility = 1.8
targetCompatibility = 1.8

version = project.version
group = project.group

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    // implementation 'mcp.mobius.waila:Waila:1.5.9_1.7.10'
    compileOnly "codechicken:CodeChickenLib:${project.minecraft_version}-${project.ccl_version}:dev"
    compileOnly "codechicken:NotEnoughItems:${project.minecraft_version}-${project.nei_version}:dev"
    compileOnly "mcp.mobius.waila:Waila:${project.waila_version}_${project.minecraft_version}:dev"
    compileOnly name: 'BloodMagic', version: project.bloodmagic_version, ext: 'jar', classifier: 'dev'
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace values in only mcmod.info.
    filesMatching('mcmod.info') {
        // Replace version and mcversion.
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
}

// Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives devJar
}

// This block configures any maven publications you want to make.
publishing {
    publications {
        mavenJava(MavenPublication) {
        // Add any other artifacts here that you would like to publish!
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
        }
    }

    // This block selects the repositories you want to publish to.
    repositories {
        // Add the repositories you want to publish to here.
    }
}
